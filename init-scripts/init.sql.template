-- Create the user only if it doesn't exist
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname = '${DB_USER}') THEN
        CREATE USER ${DB_USER} WITH PASSWORD '${DB_PASSWORD}';
    END IF;
END
$$;

-- Ensure the database exists before proceeding
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_database WHERE datname = '${DB_NAME}') THEN
        CREATE DATABASE ${DB_NAME};
    END IF;
END
$$;

-- Grant privileges only if the database exists
DO $$
BEGIN
    IF EXISTS (SELECT 1 FROM pg_database WHERE datname = '${DB_NAME}') THEN
        GRANT ALL PRIVILEGES ON DATABASE ${DB_NAME} TO ${DB_USER};
    END IF;
END
$$;

-- Switch to the database and grant schema-level permissions
DO $$
BEGIN
    IF EXISTS (SELECT 1 FROM pg_database WHERE datname = '${DB_NAME}') THEN
        PERFORM dblink_connect('dbname=${DB_NAME}');
        -- Grant privileges on the public schema
        GRANT ALL PRIVILEGES ON SCHEMA public TO ${DB_USER};

        -- Grant privileges on existing tables, sequences, and functions
        GRANT ALL ON ALL TABLES IN SCHEMA public TO ${DB_USER};
        GRANT ALL ON ALL SEQUENCES IN SCHEMA public TO ${DB_USER};
        GRANT ALL ON ALL FUNCTIONS IN SCHEMA public TO ${DB_USER};

        -- Set default privileges for future objects
        ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO ${DB_USER};
        ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO ${DB_USER};
        ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON FUNCTIONS TO ${DB_USER};
    END IF;
END
$$; 